// this file gives a rough overview of the language's features
// it will change because not all features are established yet

module Example;

import System.Console;

type Fraction(numerator: int32, denominator: int32);

impl Fraction {
    func multiply(this, other: Frcation): Fraction {
        val numerator = this.numerator * other.numerator;
        val denominator = this.denominator * other.denominator;
        return Fraction(numerator, denominator);
    }
    
    func divide(this, other: Frcation): Fraction {
        val numerator = this.numerator * other.denominator;
        val denominator = this.denominator * other.numerator;
        return Fraction(numerator, denominator);
    }
    
    func ToString(this): _ {
        return "${this.numerator} / ${this.denominator}";
    }
}

internal func add(a: int32, b: int32): _ = a + b;

func distance(x1: float32, y1: float32, x2: float32, y2: float32): float32 {
    val diffX = x1 - x2;
    val diffY = y1 - y2
    (diffX ** 2.0 + diffY ** 2.0) ** 0.5
}

internal func sum(min: int32, max: int32): _ {
    var s: int32 = 0;
    var counter = min;
    while (counter <= max) {
        s += counter;
        counter += 1;
    }
    return s;
}

func main(): int32 {
    val s = sum(10, 20);
    Console.WriteLine(s);
    val f = distance(5.5, 5.0, 10.6, 5.5);
    
    val fractionTwoThirds = Fraction(2, 3);
    val fractionOneFifth = Fraction(1, 5);
    val fractionMultiplied = fractionTwoThirds.multiply(fractionOneFifth); // 2/15
    val fractionDivided = fractionTwoThirds.divide(fractionOneFifth); // 10/3
    Console.WriteLine("Multiplied: ${fractionMultiplied.ToString()}");
    Console.WriteLine("Divided: ${fractionDivided.ToString()}");
    
    return 0;
}
